export declare enum LineType {
    DIRECTIVE = 1,
    COMMENT = 2
}
export type Separator = ' ' | '=' | '\t';
export interface Directive {
    type: LineType.DIRECTIVE;
    before: string;
    after: string;
    param: string;
    separator: Separator;
    value: string | string[];
    quoted?: boolean;
}
export interface Section extends Directive {
    config: SSHConfig;
}
export interface Match extends Section {
    criteria: Record<string, string | string[]>;
}
export interface Comment {
    type: LineType.COMMENT;
    before: string;
    after: string;
    content: string;
}
export type Line = Match | Section | Directive | Comment;
export interface FindOptions {
    Host?: string;
}
export interface MatchOptions {
    Host: string;
    User?: string;
}
export default class SSHConfig extends Array<Line> {
    static readonly DIRECTIVE: LineType.DIRECTIVE;
    static readonly COMMENT: LineType.COMMENT;
    /**
     * Parse SSH config text into structured object.
     */
    static parse(text: string): SSHConfig;
    /**
     * Stringify structured object into SSH config text.
     */
    static stringify(config: SSHConfig): string;
    /**
     * Query SSH config by host.
     */
    compute(host: string): Record<string, string | string[]>;
    /**
     * Query SSH config by host and user.
     */
    compute(opts: MatchOptions): Record<string, string | string[]>;
    /**
     * Find by Host or Match.
     */
    find(opts: FindOptions): Line | undefined;
    /**
     * Find by search function.
     * @param predicate Function to check against each line; should return a truthy value when a
     * matching line is given.
     */
    find(predicate: (line: Line, index: number, config: Line[]) => unknown): Line | undefined;
    /**
     * Remove section by Host or Match.
     */
    remove(opts: FindOptions): Line[] | undefined;
    /**
     * Remove section by search function.
     * @param predicate Function to check against each line; should return a truthy value when a
     * matching line is given.
     */
    remove(predicate: (line: Line, index: number, config: Line[]) => unknown): Line[] | undefined;
    toString(): string;
    /**
     * Append new section to existing SSH config.
     */
    append(opts: Record<string, string | string[]>): SSHConfig;
    /**
     * Prepend new section to existing SSH config.
     */
    prepend(opts: Record<string, string | string[]>, beforeFirstSection?: boolean): SSHConfig;
}
/**
 * Parse SSH config text into structured object.
 */
export declare function parse(text: string): SSHConfig;
/**
 * Stringify structured object into SSH config text.
 */
export declare function stringify(config: SSHConfig): string;
